<?xml version="1.0" encoding="UTF-8"?>
<chapter id="apis">
  <title>Working with the GemFire APIs</title>

  <para>Once the GemFire cache and regions have been configured they can
  injected and used inside application objects. This chapter describes the
  integration with Spring's <classname>DaoException</classname>
  hierarchy.</para>

  <section id="apis:exception-translation">
    <title>Exception translation</title>

    <para>Using a new data access technology requires not just accommodating
    to a new API but also handling exceptions specific to that technology. To
    accommodate this case, Spring Framework provides a technology agnostic,
    consistent exception <ulink
    url="http://www.springframework.net/doc-latest/reference/html/dao.html#dao-exceptions">hierarchy</ulink>
    that abstracts one from proprietary exceptions to a set of focused data
    access exceptions. As mentioned in the Spring Framework documentation,
    <ulink
    url="http://www.springframework.net/doc-latest/reference/html/orm.html#orm-hibernate-straight-ex">exception
    translation</ulink> can be applied transparently to your data access
    objects through the use of the <literal>[Repository]</literal> attribute
    and AOP by defining a
    <classname>PersistenceExceptionTranslationPostProcessor</classname>
    object. The same exception translation functionality is enabled when using
    GemFire as long as at least a <classname>CacheFactoryObject</classname> is
    declared. The <interfacename>Cache</interfacename> factory acts as an
    exception translator which is automatically detected by the Spring
    infrastructure and used accordingly.</para>
  </section>
</chapter>
