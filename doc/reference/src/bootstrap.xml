<?xml version="1.0" encoding="UTF-8"?>
<chapter id="bootstrap" version="5" xmlns="http://docbook.org/ns/docbook"
         xmlns:ns5="http://www.w3.org/1999/xhtml"
         xmlns:ns4="http://www.w3.org/2000/svg"
         xmlns:ns3="http://www.w3.org/1998/Math/MathML"
         xmlns:ns2="http://www.w3.org/1999/xlink"
         xmlns:ns="http://docbook.org/ns/docbook">
  <title>Bootstrapping GemFire through the Spring container</title>

  <para>One of the first tasks when using GemFire and Spring is to configure
  the data grid using dependency injection via the Spring container. While
  this is <ulink
  url="http://community.gemstone.com/display/gemfire/Integrating+GemFire+with+the+Spring+IoC+Container">possible</ulink>
  out of the box, the configuration tends to be verbose and only address basic
  cases. To address this problem, the Spring GemFire project provides several
  classes that enable the configuration of distributed caches or regions to
  support a variety of scenarios with minimal effort.</para>

  <section>
    <title>Using the Spring GemFire Namespace</title>

    <para>To simplify configuration, SGF provides a dedicated namespace for
    most of its components. However, one can opt to configure the objects
    directly through the usual &lt;object&gt; definition. For more information
    about XML Schema-based configuration in Spring.NET, see <ulink
    url="http://www.springframework.net/doc-latest/reference/html/xsd-config.html">this</ulink>
    appendix in the Spring.NET Framework reference documentation.</para>

    <programlisting language="myxml">&lt;?xml version="1.0" encoding="UTF-8"?&gt;
&lt;objects xmlns="http://www.springframework.net" 
         xmlns:gfe<co id="gfe#ns#prefix" />="http://www.springframework.net/gemfire<co
        id="gfe#ns#uri" />"&gt;

  &lt;gfe:cache ...&gt;<co id="gfe#ns#example" />

&lt;/objects&gt;
    </programlisting>

    <calloutlist>
      <callout arearefs="gfe#ns#prefix">
        <para>Spring GemFire namespace prefix. Any name can do but through out
        the reference documentation, the <literal>gfe</literal> will be
        used.</para>
      </callout>

      <callout arearefs="gfe#ns#uri">
        <para>The namespace URI.</para>
      </callout>

      <callout arearefs="gfe#ns#example">
        <para>Declaration example for the GemFire namespace. Notice the prefix
        usage.</para>
      </callout>
    </calloutlist>

    <para xmlns="">For the remainder of this doc, to improve readability, the
    XML examples will simply refer to the <literal>&lt;gfe&gt;</literal>
    namespace without the namespace declaration, where possible.</para>
  </section>

  <section id="bootstrap:cache">
    <title>Configuring the GemFire
    <interfacename>Cache</interfacename></title>

    <para>In order to use the GemFire Fabric, one needs to either create a new
    <interfacename>Cache</interfacename> or connect to an existing one. As of
    the current version of GemFire (6.0.x) there can be only one opened cache
    per application. In most cases the cache is created once and then all
    other consumers connect to it.</para>

    <para>In its simplest form, a cache can be defined in one line:</para>

    <programlisting language="myxml">&lt;gfe:cache /&gt;  </programlisting>

    <para>The declaration above declares an
    object(<literal>CacheFactoryObject</literal>) for the GemFire Cache, named
    <literal>gemfire-cache</literal>. All the other SGF components use this
    naming convention if no name is specified, allowing for very concise
    configurations. The definition above will try to connect to an existing
    cache and, in case one does not exist, create it. Since no additional
    properties were specified the created cache uses the default cache
    configuration.Especially in environments with opened caches, this basic
    configuration can go a long way.</para>

    <para>For scenarios where the cache needs to be configured, the user can
    pass in a reference the GemFire configuration file:</para>

    <programlisting language="myxml">&lt;gfe:cache id="cache-with-xml" cache-xml-location="cache-config.xml"/&gt;</programlisting>

    <para>In this example, if the cache needs to be created, it will use the
    file named <literal>cache.xml</literal> located in the root of the runtime
    directory. Only if the cache is created will the configuration file be
    used.</para>

    <para>In addition to referencing an external configuration file one can
    specify GemFire settings directly through NameValueCollection
    p<classname>roperties</classname>. This can be quite handy when just a few
    settings need to be changed.</para>

    <programlisting language="myxml">  &lt;gfe:cache id="cache-with-xml" cache-xml-location="cache-config.xml" properties-ref="props"/&gt;

  &lt;object name="props" type="System.Collections.Specialized.NameValueCollection"&gt;
    &lt;property name="['log-level']" value="warning"/&gt;
  &lt;/object&gt;</programlisting>

    <para>Other properties that can be set in the namespace are
    disconnect-on-close and distributed-system-name as shown below.</para>

    <programlisting language="myxml">  &lt;gfe:cache disconnect-on-close="false" distributed-system-name="MySystemName"/&gt;</programlisting>

    <para>The disconnect-on-close property is set to true by default. It
    should be changed to false in case you encounter a race condition in the
    3.0.0.5 client library that results in the disconnect call hanging the
    application.</para>

    <para>Or can use fallback to a <emphasis>raw</emphasis>
    <literal>&lt;objects&gt;</literal> declaration:</para>

    <programlisting language="myxml">  &lt;object name="cache-with-props" type="Spring.Data.GemFire.CacheFactoryObject, Spring.Data.GemFire"&gt;   
    &lt;property name="Properties"&gt;
      &lt;name-values&gt;
        &lt;add key="log-level" value="warning"/&gt;
      &lt;/name-values&gt;
    &lt;/property&gt;
  &lt;/object&gt;</programlisting>

    <para xmlns="">In this last example, the SGF classes are declared and
    configured directly without relying on the namespace. As one can tell,
    this approach is a generic one, exposing more of the backing
    infrastructure.</para>

    <programlisting language="myxml">&lt;object name="default-cache" type="Spring.Data.GemFire.CacheFactoryObject, Spring.Data.GemFire"/&gt;  </programlisting>

    <para>Here, the <emphasis>default-cache</emphasis> will try to connect to
    an existing cache and, in case one does not exist, create a local client
    cache. Since no additional properties were specified the created cache
    uses the default cache configuration.</para>

    <para>The name of the cache will be the name of the Spring object
    definition unless you specify a different name using the
    NameValueCollection property described next. Note, you can specify the
    name of the underlying DistributedSystem that will be created with the
    property <literal>DistributedSystemName</literal></para>

    <para>Especially in environments with opened caches, this basic
    configuration can go a long way. For scenarios where the cache needs to be
    configured, the user can pass in a reference the GemFire configuration
    file:</para>

    <programlisting language="xml">&lt;object name="cache-with-xml" type="Spring.Data.GemFire.CacheFactoryObject, Spring.Data.GemFire"&gt;
  &lt;property name="CacheXml" value="cache.xml"/&gt;
&lt;/object&gt;</programlisting>

    <para>In this example, if the cache needs to be created, it will use the
    file named <literal>cache.xml</literal> located in the runtime
    directory.</para>

    <para>In addition to referencing an external configuration file one can
    specify GemFire settings directly through .NET name value properties. This
    can be quite handy when just a few settings need to be changed:</para>

    <programlisting language="xml">&lt;object name="cache-with-props" type="Spring.Data.GemFire.CacheFactoryObject, Spring.Data.GemFire"&gt; 
  &lt;property name="Properties"&gt;
    &lt;name-values&gt;
      &lt;add key="log-level" value="warning"/&gt;
    &lt;/name-values&gt;
  &lt;/property&gt;
&lt;/object&gt;</programlisting>

    <para>The 'name' property is used to set the name of the Cache object. For
    a complete list of properties refer to the GemFire reference
    documentation.</para>

    <para>Spring object definitions support property replacement through the
    use of <ulink
    url="http://www.springframework.net/doc-latest/reference/html/objects.html#objects-variablesource">variable
    replacement</ulink>. The following configuration allows you to externalize
    the properties from the Spring configuration file which is a best
    practice. The Spring configuration file is usually an embedded assembly
    resource so as to prevent accidental changes in production. There are
    seven locations supported out of the box in Spring.NET where you can place
    your externalized configuration data and can be extended to support your
    own locations. In the following example the configuration flues would come
    from a name-value configuration section in App/Web.config</para>

    <programlisting language="myxml">&lt;gfe:cache id="cache-with-props" cache-xml-location="cache-config.xml" properties-ref="props"/&gt;

&lt;object name="props" type="System.Collections.Specialized.NameValueCollection"&gt;
  &lt;property name="['log-level']" value="${cache.log-level}"/&gt;
&lt;/object&gt;

&lt;object type="Spring.Objects.Factory.Config.VariablePlaceholderConfigurer, Spring.Core"&gt;
   &lt;property name="VariableSources"&gt;
      &lt;list&gt;
         &lt;object type="Spring.Objects.Factory.Config.ConfigSectionVariableSource, Spring.Core"&gt;
            &lt;property name="SectionNames" value="CacheConfiguration" /&gt;
         &lt;/object&gt;
      &lt;/list&gt;
   &lt;/property&gt;
&lt;/object&gt;

</programlisting>

    <para>The CacheConfiguration section in App.config would then look like
    the following</para>

    <programlisting language="myxml">&lt;configuration&gt;
  &lt;configSections&gt;
    &lt;section name="CacheConfiguration" type="System.Configuration.NameValueSectionHandler"/&gt;
  &lt;/configSections&gt;

  &lt;CacheConfiguration&gt;
    &lt;add key="cache.log-level" value="warning"/&gt;
  &lt;/CacheConfiguration&gt;

&lt;/configuration&gt;</programlisting>

    <para>It is worth pointing out again, that the cache settings apply only
    if the cache needs to be created, there is no opened cache in existence
    otherwise the existing cache will be used and the configuration will
    simply be discarded.</para>
  </section>

  <section id="bootstrap:region">
    <title>Configuring a GemFire <interfacename>Region</interfacename></title>

    <para>Once the <interfacename>Cache</interfacename> is configured, one
    needs to configure one or more <interfacename>Region</interfacename>s to
    interact with the data fabric. In a similar manner to the
    <classname>CacheFactoryObject</classname>, the
    <classname>RegionFactoryObject</classname> allows existing
    <interfacename>Region</interfacename>s to retrieved or, in case they don't
    exist, created using various settings. One can specify the
    <interfacename>Region</interfacename> name, whether it will be destroyed
    on shutdown (thereby acting as a temporary cache), the associated
    <interfacename>CacheLoader</interfacename>s,
    <interfacename>CacheListener</interfacename>s and
    <interfacename>CacheWriter</interfacename>s and if needed, the
    <interfacename>RegionAttributes</interfacename> for full
    customization.</para>

    <para>Let us start with a simple region declaration, named
    <emphasis>basic</emphasis> using a nested cache declaration:</para>

    <programlisting language="xml">&lt;object name="basic" type="Spring.Data.GemFire.RegionFactoryObject, Spring.Data.GemFire"&gt;
  &lt;property Name="Cache"&gt;
    &lt;object type="Spring.Data.GemFire.CacheFactoryObject, Spring.Data.GemFire"/&gt; 
  &lt;/property&gt; 
&lt;/object&gt;
</programlisting>

    <para>By default the region name is the name of the object definition
    unless explicitly specified using the <literal>Name</literal>
    property.</para>

    <para>It is worth pointing out, that for the vast majority of cases
    configuring the cache loader, listener and writer through the Spring
    container is preferred since the same instances can be reused across
    multiple regions and additionally, the instances themselves can benefit
    from the container's rich feature set:</para>

    <programlisting language="myxml">  &lt;object name="baseRegion" abstract="true"&gt;
    &lt;property name="Endpoints" value="localhost:40404"/&gt;
    &lt;property name="Cache" ref="Cache"/&gt;   &lt;!-- definition not shown here --&gt;
  &lt;/object&gt;

  &lt;object name="listeners" type="Spring.Data.GemFire.RegionFactoryObject, Spring.Data.GemFire"
          parent="baseRegion"&gt;
    &lt;property name="CacheListener"&gt;
      &lt;object type="Spring.Data.GemFire.Tests.SimpleCacheListener, Spring.Data.GemFire.Tests"&gt;
        &lt;!-- set properties or constructor arguments --&gt;
      &lt;/object&gt;
    &lt;/property&gt;
    &lt;property name="CacheLoader"&gt;
      &lt;object type="Spring.Data.GemFire.Tests.SimpleCacheLoader, Spring.Data.GemFire.Tests"/&gt;      
    &lt;/property&gt;
    &lt;property name="CacheWriter"&gt;
      &lt;object type="Spring.Data.GemFire.Tests.SimpleCacheWriter, Spring.Data.GemFire.Tests"/&gt;
    &lt;/property&gt;
  &lt;/object&gt;

</programlisting>

    <section id="bootstrap:region:client">
      <title>Configuring update interest for <emphasis>client</emphasis>
      <interfacename>Region</interfacename></title>

      <para>Client <emphasis>interests</emphasis> can be registered in both
      key and regex form through <classname>AllKeysInterest</classname>,
      <classname>KeyInterest</classname>, and
      <classname>RegexInterest</classname> classes in the
      <literal>Spring.Data.GemFire</literal> namespace. Here is an example of
      how to configure the AllKeys interest in the region.</para>

      <programlisting language="myxml">  &lt;object name="baseRegion" abstract="true"&gt;
    &lt;property name="Endpoints" value="localhost:40404"/&gt;
    &lt;property name="Cache" ref="Cache"/&gt;   &lt;!-- definition not shown here --&gt;
  &lt;/object&gt;

  &lt;object name="basic-interest" type="Spring.Data.GemFire.RegionFactoryObject, Spring.Data.GemFire"
          parent="baseRegion"&gt;
    &lt;property name="ClientNotification" value="true"/&gt;
    &lt;property name="interests"&gt;
      &lt;list&gt;
        <emphasis role="bold">&lt;object type="Spring.Data.GemFire.AllKeysInterest"/&gt;</emphasis>
      &lt;/list&gt;
    &lt;/property&gt;
  &lt;/object&gt;
</programlisting>

      <para>To register interest for a set of key, use the KeyInterest class,
      as shown below from the sample application</para>

      <programlisting language="myxml">  &lt;object name="Region" type="Spring.Data.GemFire.RegionFactoryObject, Spring.Data.GemFire"&gt;
    &lt;property name="Endpoints" value="localhost:40404"/&gt;
    &lt;property name="Cache" ref="Cache"/&gt;
    &lt;property name="Name" value="exampleregion"/&gt;
    &lt;property name="ClientNotification" value="true"/&gt;
    &lt;property name="Interests"&gt;
      &lt;list&gt;
<emphasis role="bold">        &lt;object type="Spring.Data.GemFire.KeyInterest"&gt;
          &lt;property name="Keys"&gt;
            &lt;list&gt;
              &lt;object type="GemStone.GemFire.Cache.CacheableString" factory-method="Create"&gt;
                &lt;constructor-arg value="Key-123"/&gt;
              &lt;/object&gt;
            &lt;/list&gt;
          &lt;/property&gt;
        &lt;/object&gt;</emphasis>
      &lt;/list&gt;
    &lt;/property&gt;
  &lt;/object&gt;</programlisting>

      <para>To register interest based on a regular expression, use the
      following configuration</para>

      <programlisting language="myxml">  &lt;object name="Region" type="Spring.Data.GemFire.RegionFactoryObject, Spring.Data.GemFire"&gt;
    &lt;property name="Endpoints" value="localhost:40404"/&gt;
    &lt;property name="Cache" ref="Cache"/&gt;
    &lt;property name="Name" value="exampleregion"/&gt;
    &lt;property name="ClientNotification" value="true"/&gt;
    &lt;property name="Interests"&gt;
      &lt;list&gt;
<emphasis role="bold">        &lt;object type="Spring.Data.GemFire.RegexInterest"&gt;
          &lt;property name="Regex" value="Key-.*"/&gt;
        &lt;/object&gt;</emphasis>
      &lt;/list&gt;
    &lt;/property&gt;
  &lt;/object&gt;</programlisting>

      <para>This would only register interest in keys of the type 'Key-123' or
      'Key-4abc'.</para>

      <note>
        <para>For the M2 release the use of namespaces and type converters for
        'ICacheableKey' subclasses will make this configuration significantly
        less verbose. Also, there will a means to specify the collection class
        that can be filled with the intial cache values.</para>
      </note>

      <para>Please refer to the API documentation for more information on the
      various <interfacename>IInterest</interfacename> subclasses.</para>
    </section>
  </section>
</chapter>
