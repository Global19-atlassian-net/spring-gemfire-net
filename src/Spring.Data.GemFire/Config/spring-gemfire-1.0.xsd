<?xml version="1.0" encoding="UTF-8" standalone="no"?>
<xsd:schema xmlns="http://www.springframework.net/gemfire"
           xmlns:objects="http://www.springframework.net"
           xmlns:xsd="http://www.w3.org/2001/XMLSchema"
           xmlns:vs="http://schemas.microsoft.com/Visual-Studio-Intellisense"
           targetNamespace="http://www.springframework.net/gemfire"
           elementFormDefault="qualified" attributeFormDefault="unqualified"
           vs:friendlyname="Spring.NET Gemfire Framework Configuration" vs:ishtmlschema="false" vs:iscasesensitive="true" vs:requireattributequotes="true" vs:defaultnamespacequalifier="" vs:defaultnsprefix="">
  
    <xsd:import namespace="http://www.springframework.net"/>

    <xsd:annotation>
        <xsd:documentation><![CDATA[
            Namespace support for the Spring GemFire project.
        ]]></xsd:documentation>
    </xsd:annotation>
    
    <xsd:element name="cache">
		<xsd:annotation>
			<xsd:documentation><![CDATA[
Defines a GemFire Cache instance used for creating or retrieving 'regions'.  Default name is gemfire-cache.
			]]></xsd:documentation>
		</xsd:annotation>
		<xsd:complexType>
			<xsd:attribute name="id" type="xsd:ID" use="optional">
				<xsd:annotation>
					<xsd:documentation><![CDATA[
The name of the cache definition (by default "gemfire-cache").]]></xsd:documentation>
				</xsd:annotation>
			</xsd:attribute>
			<xsd:attribute name="cache-xml-location" type="xsd:string" use="optional">
				<xsd:annotation>
					<xsd:documentation><![CDATA[
The location of the GemFire cache xml file.
							]]></xsd:documentation>
				</xsd:annotation>
			</xsd:attribute>
      <xsd:attribute name="disconnect-on-close" type="xsd:boolean" default="true" use="optional">
        <xsd:annotation>
          <xsd:documentation>
            <![CDATA[
Indicates whether to call DistributedSystem.Disconnect when this cache is disposed.  
There is a bug in the 3.0.0.9 client that may hang calls to close.  The default is
true, set to false if you experience a hang in the application.
							]]>
          </xsd:documentation>
        </xsd:annotation>
      </xsd:attribute>
      <xsd:attribute name="keepalive-on-close" type="xsd:boolean" default="true" use="optional">
        <xsd:annotation>
          <xsd:documentation>
            <![CDATA[
Indicates whether to whether to keep a durable client's queue alive when this cache is closed.  
The default is true if the cache has been configured as a durable client.
							]]>
          </xsd:documentation>
        </xsd:annotation>
      </xsd:attribute>      
      <xsd:attribute name="distributed-system-name" type="xsd:string" use="optional">
        <xsd:annotation>
          <xsd:documentation>
            <![CDATA[
The name of the GemFire Distributed System.
							]]>
          </xsd:documentation>
        </xsd:annotation>
      </xsd:attribute>
      <xsd:attribute name="properties-ref" type="xsd:string" use="optional">
				<xsd:annotation>
					<xsd:documentation><![CDATA[
The object name of a NameValuesCollection object that will be used for property substitution. For loading properties
consider using a dedicated utility such as the <util:*/> namespace and its 'properties' element.
							]]></xsd:documentation>
				</xsd:annotation>
			</xsd:attribute>
		</xsd:complexType>
	</xsd:element>

	<!-- nested object definition -->
	<xsd:complexType name="beanDeclarationType">
		<xsd:sequence>
			<xsd:any namespace="##other" minOccurs="0" maxOccurs="1" processContents="skip">
    			<xsd:annotation>
         			<xsd:documentation><![CDATA[
Inner object definition. The nested declaration serves as an alternative to object references (using 
both in the same definition) is illegal.
					]]></xsd:documentation>
				</xsd:annotation>
         	</xsd:any>						
		</xsd:sequence>
		<xsd:attribute name="ref" type="xsd:string" use="optional">
			<xsd:annotation>
				<xsd:documentation><![CDATA[
The name of the object referred by this declaration. If no reference exists, use an inner object declaration.
				]]></xsd:documentation>
			</xsd:annotation>
		</xsd:attribute>
	</xsd:complexType>
	
	<xsd:complexType name="basicRegionType">
		<xsd:attribute name="id" type="xsd:string" use="required">
			<xsd:annotation>
				<xsd:documentation><![CDATA[
The id of the region object definition.
				]]></xsd:documentation>
			</xsd:annotation>
		</xsd:attribute>
		<xsd:attribute name="name" type="xsd:string" use="optional">
			<xsd:annotation>
				<xsd:documentation><![CDATA[
The name of the region definition. If no specified, it will have the value of the id attribute (that is, the object name).
				]]></xsd:documentation>
			</xsd:annotation>
		</xsd:attribute>
		<xsd:attribute name="cache-ref" type="xsd:string" default="gemfire-cache" use="optional">
			<xsd:annotation>
				<xsd:documentation><![CDATA[
The name of the object defining the GemFire cache (by default 'gemfire-cache').
				]]></xsd:documentation>
			</xsd:annotation>
		</xsd:attribute>
    <xsd:attribute name="attributes-ref" type="xsd:string" use="optional">
      <xsd:annotation>
        <xsd:documentation>
          <![CDATA[
The object name of a RegionAttributesFactoryObject that will be used to configure detailed region properties.
							]]>
        </xsd:documentation>
      </xsd:annotation>
    </xsd:attribute>    
	</xsd:complexType> 
	
	
	<xsd:complexType name="readOnlyRegionType" abstract="true">
		<xsd:complexContent>
			<xsd:extension base="basicRegionType">
				<xsd:sequence>
					<xsd:element name="cache-listener" minOccurs="0" maxOccurs="1">
						<xsd:annotation>
							<xsd:documentation source="com.gemstone.gemfire.cache.CacheListener"><![CDATA[
A cache listener definition for this region. A cache listener handles region or entry related events (that occur after
various operations on the region). Multiple listeners can be declared in a nested manner.

Note: Avoid the risk of deadlock. Since the listener is invoked while holding a lock on the entry generating the event,
it is easy to generate a deadlock by interacting with the region. For this reason, it is highly recommended to use some
other thread for accessing the region and not waiting for it to complete its task.
							]]></xsd:documentation>
						</xsd:annotation>
						<xsd:complexType>
							<xsd:sequence>
								<xsd:any namespace="##other" minOccurs="0" maxOccurs="unbounded" processContents="skip">
					    			<xsd:annotation>
					         			<xsd:documentation><![CDATA[
Inner object definition of the cache listener.
										]]></xsd:documentation>
									</xsd:annotation>
					         	</xsd:any>						
							</xsd:sequence>
							<xsd:attribute name="ref" type="xsd:string" use="optional">
								<xsd:annotation>
									<xsd:documentation><![CDATA[
The name of the cache listener object referred by this declaration. Used as a convenience method. If no reference exists, 
use inner object declarations.
									]]></xsd:documentation>
								</xsd:annotation>
							</xsd:attribute>
						</xsd:complexType>
					</xsd:element>
					<xsd:element name="disk-store" type="diskStoreType" minOccurs="0" maxOccurs="1">
						<xsd:annotation>
							<xsd:documentation><![CDATA[
Disk storage configuration for the defined region.
							]]></xsd:documentation>
						</xsd:annotation>
					</xsd:element>							
				</xsd:sequence>
				<xsd:attribute name="persistent" type="xsd:boolean" default="false">
					<xsd:annotation>
						<xsd:documentation><![CDATA[
Indicates whether the defined region is persistent or not. GemFire ensures that all the data you put into a region that
 is configured for persistence will be written to disk in a way that it can be recovered the next time you create the 
region. This allows data to be recovered after a machine or process failure or after an orderly shutdown and restart 
of GemFire.

Default is false, meaning the regions are not persisted.

Note: Persistence for partitioned regions is supported only from GemFire 6.5 onwards.						
						]]></xsd:documentation>
					</xsd:annotation>
				</xsd:attribute>
			</xsd:extension>
		</xsd:complexContent>
	</xsd:complexType>
	
	<xsd:complexType name="regionType">
		<xsd:complexContent>
			<xsd:extension base="readOnlyRegionType">
				<xsd:sequence minOccurs="0" maxOccurs="1">
					<xsd:element name="cache-loader" minOccurs="0"  maxOccurs="1" type="beanDeclarationType">
						<xsd:annotation>
							<xsd:documentation source="com.gemstone.gemfire.cache.CacheLoader"><![CDATA[
The cache loader definition for this region. A cache loader allows data to be placed into a region.
							]]></xsd:documentation>
						</xsd:annotation>
					</xsd:element>
					<xsd:element name="cache-writer" minOccurs="0" maxOccurs="1" type="beanDeclarationType">
						<xsd:annotation>
							<xsd:documentation source="com.gemstone.gemfire.cache.CacheWriter"><![CDATA[
The cache writer definition for this region. A cache writer acts as a dedicated synchronous listener that is notified
before a region or an entry is modified. A typical example would be a writer that updates the database.

Note: Only one CacheWriter is invoked. GemFire will always prefer the local one (if it exists) otherwise it will
arbitrarily pick one.
							]]></xsd:documentation>
						</xsd:annotation>
					</xsd:element>
				</xsd:sequence>
			</xsd:extension>
		</xsd:complexContent>
	</xsd:complexType>
	
	<xsd:element name="lookup-region" type="basicRegionType">
		<xsd:annotation>
			<xsd:documentation><![CDATA[[
Looks up an existing, working, GemFire region. Typically regions are defined through GemFire own configuration, the 
cache.xml. If the region does not exist, an exception will be thrown.

For defining regions, consider the region elements.
			]]></xsd:documentation>
		</xsd:annotation>
	</xsd:element>
	
	<xsd:complexType name="evictionType">
		<xsd:sequence minOccurs="0" maxOccurs="1">
			<xsd:element name="object-sizer" type="beanDeclarationType">
				<xsd:annotation>
					<xsd:documentation><![CDATA[
Entity computing sizes for objects stored into the grid.
					]]></xsd:documentation>
				</xsd:annotation>
			</xsd:element>
		</xsd:sequence>
		<xsd:attribute name="type" default="ENTRY_COUNT">
			<xsd:simpleType>
				<xsd:restriction base="xsd:string">
					<xsd:enumeration value="ENTRY_COUNT">
						<xsd:annotation>
							<xsd:documentation><![CDATA[
Considers the number of entries in the region before performing an eviction.
							]]></xsd:documentation>
						</xsd:annotation>
					</xsd:enumeration>
					<xsd:enumeration value="MEMORY_SIZE">
						<xsd:annotation>
							<xsd:documentation><![CDATA[
Considers the amount of memory consumed by the region before performing an eviction.
							]]></xsd:documentation>
						</xsd:annotation>
					</xsd:enumeration>
					<xsd:enumeration value="HEAP_PERCENTAGE">
						<xsd:annotation>
							<xsd:documentation><![CDATA[
Considers the amount of heap used (through the GemFire resource manager) before performing an eviction.
							]]></xsd:documentation>
						</xsd:annotation>
					</xsd:enumeration>
				</xsd:restriction>
			</xsd:simpleType>
		</xsd:attribute>
		<xsd:attribute name="threshold" type="xsd:long" use="required">
			<xsd:annotation>
				<xsd:documentation><![CDATA[
The threshold (or limit) against which the eviction algorithm runs. Once the threashold is reached, eviction is
performed.
				]]></xsd:documentation>
			</xsd:annotation>
		</xsd:attribute>
	</xsd:complexType>
	
	<xsd:simpleType name="evictionActionType">
		<xsd:restriction base="xsd:string">
			<xsd:enumeration value="LOCAL_DESTROY">
				<xsd:annotation>
					<xsd:documentation><![CDATA[
The LRU (least-recently-used) region entries is locally destroyed.

Note: this option is not compatible with replicated regions (as it render the replica region incomplete).  
							]]></xsd:documentation>
				</xsd:annotation>
			</xsd:enumeration>
			<xsd:enumeration value="OVERFLOW_TO_DISK">
				<xsd:annotation>
					<xsd:documentation><![CDATA[
The LRU (least-recently-used) region entry values are written to disk and nulled-out in the member to 
reclaim memory.
							]]></xsd:documentation>
				</xsd:annotation>
			</xsd:enumeration>
		</xsd:restriction>
	</xsd:simpleType>
	
	<xsd:complexType name="diskStoreType">
		<xsd:sequence>
			<xsd:element name="disk-dir" minOccurs="0" maxOccurs="unbounded">
				<xsd:complexType>
					<xsd:attribute name="location" type="xsd:string" use="required">
						<xsd:annotation>
							<xsd:documentation><![CDATA[
Directory on the file system for storing data.

Note: the directory must already exist.						
							]]></xsd:documentation>
						</xsd:annotation>
					</xsd:attribute>
					<xsd:attribute name="max-size" type="xsd:int" default="10240">
						<xsd:annotation>
							<xsd:documentation><![CDATA[
The maximum size (in megabytes) of data stored in each directory. Default is 10240 MB (10 gigabytes). 
							]]></xsd:documentation>
						</xsd:annotation>
					</xsd:attribute>
				</xsd:complexType>
			</xsd:element>
		</xsd:sequence>
		<xsd:attribute name="synchronous-write" type="xsd:boolean" default="false">
			<xsd:annotation>
				<xsd:documentation><![CDATA[
Indicates whether the writing to the disk si synchronous or not. Default is false, meaning asynchronous writing.
				]]>
				</xsd:documentation>
			</xsd:annotation>
		</xsd:attribute>		
		<xsd:attribute name="auto-compact" type="xsd:boolean" default="true">
			<xsd:annotation>
				<xsd:documentation><![CDATA[
Indicates whether or not the operation logs are automatically compacted or not. Default is true.
				]]>
				</xsd:documentation>
			</xsd:annotation>
		</xsd:attribute>
		<!-- 
		<xsd:attribute name="compaction-threshold" default="50">
			<xsd:annotation>
				<xsd:documentation><![CDATA[
Sets the threshold at which an oplog will become compactable. Until it reaches this threshold the oplog will not be 
compacted. The threshold is a percentage in the range 0..100. When the amount of garbage in an oplog exceeds this 
percentage then when a compaction is done this garbage will be cleaned up freeing up disk space. Garbage is created 
by entry destroys, entry updates, and region destroys. 
				]]>
				</xsd:documentation>
			</xsd:annotation>
			<xsd:simpleType>
				<xsd:restriction base="xsd:short">
					<xsd:minExclusive value="0"/>
					<xsd:maxExclusive value="100"/>
				</xsd:restriction>
			</xsd:simpleType>
		</xsd:attribute>
		 -->
		<xsd:attribute name="max-oplog-size" type="xsd:long" default="1024">
			<xsd:annotation>
				<xsd:documentation><![CDATA[
Sets the maximum size in megabytes a single oplog (operation log) is allowed to be. When an oplog is created this 
amount of file space will be immediately reserved. 
				]]>
				</xsd:documentation>
			</xsd:annotation>
		</xsd:attribute>
		<xsd:attribute name="time-interval" type="xsd:long" default="1">
			<xsd:annotation>
				<xsd:documentation><![CDATA[
Sets the number of milliseconds that can elapse before unwritten data is written to disk. 
It is considered only for asynchronous writing. 
				]]>
				</xsd:documentation>
			</xsd:annotation>
		</xsd:attribute>
		<xsd:attribute name="queue-size" type="xsd:long" default="0">
			<xsd:annotation>
				<xsd:documentation><![CDATA[
The maximum number of operations that can be asynchronously queued. Once this many pending async operations have been 
queued async ops will begin blocking until some of the queued ops have been flushed to disk.
Considered only for asynchronous writing.
				]]>
				</xsd:documentation>
			</xsd:annotation>
		</xsd:attribute>
	</xsd:complexType>

	<xsd:element name="client-region">
		<xsd:annotation>
			<xsd:documentation source="org.springframework.data.gemfire.client.ClientRegionFactoryObject"><![CDATA[
Defines a GemFire client region instance. A client region is connected to a (long-lived) farm of GemFire servers from
which it receives its data. The client can hold some data locally or forward all requests to the server.
			]]></xsd:documentation>
		</xsd:annotation>
		<xsd:complexType>
			<xsd:complexContent>
				<xsd:extension base="readOnlyRegionType">
					<xsd:sequence>
						<xsd:choice minOccurs="0" maxOccurs="unbounded">
							<xsd:element name="key-interest">
								<xsd:annotation>
									<xsd:documentation><![CDATA[
Key based interest. If the key is a List, then all the keys in the List will be registered. The key can also be the 
special token 'ALL_KEYS', which will register interest in all keys in the region. In effect, this will cause an update 
to any key in this region in the CacheServer to be pushed to the client. 
									]]></xsd:documentation>
								</xsd:annotation>
								<xsd:complexType>
									<xsd:complexContent>
										<xsd:extension base="interestType">
											<xsd:sequence minOccurs="0" maxOccurs="1">
												<xsd:any namespace="##other" minOccurs="0" maxOccurs="unbounded" processContents="skip">
			    									<xsd:annotation>
			         									<xsd:documentation><![CDATA[
Inner object definition of the client key interest.
														]]></xsd:documentation>
													</xsd:annotation>
			         							</xsd:any>						
											</xsd:sequence>
											<xsd:attribute name="key-ref" type="xsd:string" use="optional">
												<xsd:annotation>
													<xsd:documentation><![CDATA[
The name of the client key interest object referred by this declaration. Used as a convenience method. If no reference exists, 
use the inner object declaration.
													]]></xsd:documentation>
												</xsd:annotation>
											</xsd:attribute>
										</xsd:extension>
									</xsd:complexContent>
								</xsd:complexType>
							</xsd:element>
              <xsd:element name="all-keys-interest">
                <xsd:annotation>
                  <xsd:documentation>
                    <![CDATA[
Register interest for all the keys of the region to get updates from the server. Valid only for a Native Client region
when client notification is true.  
									]]>
                  </xsd:documentation>
                </xsd:annotation>               
                <xsd:complexType>
                  <xsd:complexContent>                    
                    <xsd:extension base="interestType">
                    </xsd:extension>
                  </xsd:complexContent>
                </xsd:complexType>
              </xsd:element>              
							<xsd:element name="regex-interest">
								<xsd:annotation>
									<xsd:documentation><![CDATA[
Regular expression based interest. If the pattern is '.*' then all keys of any type will be pushed to the client. 
									]]></xsd:documentation>
								</xsd:annotation>
								<xsd:complexType>
									<xsd:complexContent>
										<xsd:extension base="interestType">
											<xsd:attribute name="pattern" type="xsd:string"/>
										</xsd:extension>
									</xsd:complexContent>
								</xsd:complexType>
							</xsd:element>
						</xsd:choice>
						<xsd:element name="eviction" minOccurs="0" maxOccurs="1">
							<xsd:annotation>
								<xsd:documentation><![CDATA[
Eviction policy for the partitioned region.
								]]></xsd:documentation>
							</xsd:annotation>
							<xsd:complexType>
								<xsd:complexContent>
									<xsd:extension base="evictionType">
										<xsd:attribute name="action" type="evictionActionType" default="LOCAL_DESTROY">
											<xsd:annotation>
												<xsd:documentation><![CDATA[
The action to take when performing eviction.
												]]></xsd:documentation>
											</xsd:annotation>
										</xsd:attribute>
									</xsd:extension>
								</xsd:complexContent>
							</xsd:complexType>
						</xsd:element>						
					</xsd:sequence>
					<xsd:attribute name="pool-name" use="required" type="xsd:string">
						<xsd:annotation>
							<xsd:documentation><![CDATA[
The name of the pool used by this client.
 							]]></xsd:documentation>
						</xsd:annotation>
					</xsd:attribute>
				</xsd:extension>
			</xsd:complexContent>
		</xsd:complexType>
	</xsd:element>
	
	<xsd:complexType name="connectionType">
		<xsd:attribute name="host" type="xsd:string">
			<xsd:annotation>
				<xsd:documentation><![CDATA[
The host name or ip address of the connection.				
				]]></xsd:documentation>
			</xsd:annotation>
		</xsd:attribute>
		<xsd:attribute name="port">
			<xsd:annotation>
				<xsd:documentation><![CDATA[
The port number of the connection (between 1 and 65535 inclusive).				
				]]></xsd:documentation>
			</xsd:annotation>
			<xsd:simpleType>
				<xsd:restriction base="xsd:positiveInteger">
					<xsd:minInclusive value="1"/>
					<xsd:maxInclusive value="65535"/>
				</xsd:restriction>
			</xsd:simpleType>			
		</xsd:attribute>
	</xsd:complexType>

	<xsd:complexType name="interestType" abstract="true">
		<xsd:attribute name="durable"  type="xsd:boolean" default="false" use="optional">
			<xsd:annotation>
				<xsd:documentation><![CDATA[
Indicates whether or not the registered interest is durable or not. Default is false.
				]]></xsd:documentation>
			</xsd:annotation>
		</xsd:attribute>
		<xsd:attribute name="result-policy" default="KeysAndValues" use="optional">
			<xsd:annotation>
				<xsd:documentation><![CDATA[
The result policy for this interest. Can be one of 'KEYS' or 'KEYS_VALUES' (the default) or 'NONE'. 

KEYS - Initializes the local cache with the keys satisfying the request.
KEYS-VALUES - initializes the local cache with the keys and current values satisfying the request.
NONE -  Does not initialize the local cache.
					]]></xsd:documentation>
			</xsd:annotation>
			<xsd:simpleType>
				<xsd:restriction base="xsd:string">
					<xsd:enumeration value="Keys"/>
					<xsd:enumeration value="KeysAndValues"/>
					<xsd:enumeration value="None"/>
				</xsd:restriction>
			</xsd:simpleType>
		</xsd:attribute>
	</xsd:complexType>
	
	<xsd:element name="pool">
		<xsd:annotation>
			<xsd:documentation source="org.springframework.data.gemfire.client.PoolFactoryObject"><![CDATA[
Defines a pool for connections from a client to a set of GemFire Cache Servers.

Note that in order to instantiate a pool, a GemFire cache needs to be already started.
			]]></xsd:documentation>
		</xsd:annotation>
		<xsd:complexType>
			<xsd:choice minOccurs="1" maxOccurs="1">
				<xsd:element name="locator" type="connectionType" minOccurs="1" maxOccurs="unbounded"/>
				<xsd:element name="server" type="connectionType" minOccurs="1" maxOccurs="unbounded"/>
			</xsd:choice>
			<xsd:attribute name="id" type="xsd:ID" use="optional">
				<xsd:annotation>
					<xsd:documentation><![CDATA[
The name of the pool definition (by default "gemfire-pool").]]></xsd:documentation>
				</xsd:annotation>
			</xsd:attribute>
			<xsd:attribute name="free-connection-timeout" use="optional" type="xsd:int"/>
			<xsd:attribute name="idle-timeout" use="optional" type="xsd:long"/>
			<xsd:attribute name="load-conditioning-interval" use="optional" type="xsd:int"/>
			<xsd:attribute name="max-connections" use="optional" type="xsd:int"/>
			<xsd:attribute name="min-connections" use="optional" type="xsd:int"/>
			<xsd:attribute name="ping-interval" use="optional" type="xsd:long"/>
			<xsd:attribute name="read-timeout" use="optional" type="xsd:int"/>
			<xsd:attribute name="retry-attempts" use="optional" type="xsd:int"/>
			<xsd:attribute name="server-group" use="optional" type="xsd:string"/>
			<xsd:attribute name="socket-buffer-size" use="optional" type="xsd:int"/>
			<xsd:attribute name="statistic-interval" use="optional" type="xsd:int"/>
			<xsd:attribute name="subscription-enabled" use="optional" type="xsd:boolean"/>
			<xsd:attribute name="subscription-message-tracking-timeout" use="optional" type="xsd:int"/>
			<xsd:attribute name="subscription-redundancy" use="optional" type="xsd:int"/>
			<xsd:attribute name="thread-local-connections" use="optional" type="xsd:boolean"/>
		</xsd:complexType>
	</xsd:element>
</xsd:schema>